package viz_test

import (
	"fmt"
	"os"
	"strings"
	"testing"

	"github.com/djthorpe/data"
	"github.com/djthorpe/data/pkg/canvas"
	"github.com/djthorpe/data/pkg/table"
	"github.com/djthorpe/data/pkg/viz"
)

const (
	DATASET_A = "../../etc/dataset/12-15-2020.csv"
)

func Test_Points_001(t *testing.T) {
	points := viz.NewPoints("a")
	if points == nil {
		t.Fatal("Expected non-nil points")
	}
	t.Log(points)
}

func Test_Points_002(t *testing.T) {
	table := table.NewTable()
	fh, err := os.Open(DATASET_A)
	if err != nil {
		t.Fatal(err)
	}
	defer fh.Close()
	if err := table.Read(fh, table.OptHeader(), table.OptType(data.Nil|data.Datetime|data.Float)); err != nil {
		t.Fatal(err)
	}

	fmt.Println(table)

	// Sort by "Confirmed Cases"
	table.Sort(func(a, b []interface{}) bool {
		if x, ok := a[5].(float64); ok == false {
			return false
		} else if y, ok := b[5].(float64); ok == false {
			return false
		} else {
			return x < y
		}
	})

	// "Confirmed Cases" is column 5
	points := viz.NewPoints(table.Col(5).Name())
	canvas := canvas.NewCanvas(data.A4LandscapeSize, data.MM)
	points.Read(table, func(i int, row []interface{}) (data.Point, error) {
		if y, ok := row[5].(float64); ok == false {
			return data.ZeroPoint, data.ErrSkipTransform
		} else {
			return data.Point{float32(i) / 60.0 * 841, float32(y) / 1.644742e+06 * 594}, nil
		}
	})

	// Write the series to the canvas, scaling values so that (0,0) translates to (0,0) and
	// (W,H) translates to maximum point in series
	points.WritePath(canvas).Scale(data.Point{0, 0}, points.Max())

	// Output SVG
	b := new(strings.Builder)
	if err := canvas.Write(b); err != nil {
		t.Error(err)
	} else {
		t.Log("\n" + b.String())
	}
}
